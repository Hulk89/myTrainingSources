!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
LinkedList	LinkedList/ll.h	/^typedef struct LinkedList$/;"	s
LinkedList	LinkedList/ll.h	/^} LinkedList;$/;"	t	typeref:struct:LinkedList
MAXLEN	File_IO/fly.c	/^#define MAXLEN /;"	d	file:
MAX_LEN	Thread/01_testForThread/01_test.cpp	/^#define MAX_LEN /;"	d	file:
MAX_LEN	Thread/02_DaemonizeTest/02_daemonize.cpp	/^#define MAX_LEN /;"	d	file:
Node	LinkedList/ll.h	/^typedef struct Node$/;"	s
Node	LinkedList/ll.h	/^} Node;$/;"	t	typeref:struct:Node
STDERR	File_IO/dup.c	/^#define STDERR /;"	d	file:
STDIN	File_IO/dup.c	/^#define STDIN /;"	d	file:
STDOUT	File_IO/dup.c	/^#define STDOUT /;"	d	file:
dataForThread	Thread/01_testForThread/01_test.cpp	/^struct dataForThread {$/;"	s	file:
dataForThread	Thread/02_DaemonizeTest/02_daemonize.cpp	/^struct dataForThread {$/;"	s	file:
deleteAll	LinkedList/ll.c	/^void deleteAll ( LinkedList* root )$/;"	f
deleteAtIndex	LinkedList/ll.c	/^int deleteAtIndex ( LinkedList* root, int idx )$/;"	f
deleteRecursive	LinkedList/ll.c	/^void deleteRecursive ( Node* aNode )$/;"	f
end	LinkedList/ll.c	/^struct Node* end ( struct LinkedList* root )$/;"	f
error_handling	Thread/02_DaemonizeTest/02_daemonize.cpp	/^void error_handling(char *message)$/;"	f
error_handling	Thread/02_DaemonizeTest/hello_client.c	/^void error_handling(char *message)$/;"	f
findObj	LinkedList/ll.c	/^struct Node* findObj ( struct LinkedList* root , void* aObj )$/;"	f
funcForThread	Thread/01_testForThread/01_test.cpp	/^funcForThread ( void* data )$/;"	f
funcForThread	Thread/02_DaemonizeTest/02_daemonize.cpp	/^void* funcForThread ( void* data )$/;"	f
head	LinkedList/ll.h	/^    struct Node* head;$/;"	m	struct:LinkedList	typeref:struct:LinkedList::Node
id	Thread/01_testForThread/01_test.cpp	/^    int id;$/;"	m	struct:dataForThread	file:
id	Thread/02_DaemonizeTest/02_daemonize.cpp	/^    int id;$/;"	m	struct:dataForThread	file:
insertAfterIndex	LinkedList/ll.c	/^int insertAfterIndex ( LinkedList* root, int idx, void* aObj )$/;"	f
insertAtFirst	LinkedList/ll.c	/^int insertAtFirst ( LinkedList* root, void* aObj )$/;"	f
insertObj	LinkedList/ll.c	/^int insertObj ( struct LinkedList* root, void* aObj )$/;"	f
isRunning	Thread/02_DaemonizeTest/02_daemonize.cpp	/^bool isRunning;$/;"	v
mObj	LinkedList/ll.h	/^    void* mObj;$/;"	m	struct:Node
main	File_IO/dup.c	/^int main()$/;"	f
main	File_IO/fly.c	/^int main()$/;"	f
main	LinkedList/main.c	/^int main(int argc, char* argv[] )$/;"	f
main	Process/execTest.c	/^int main( int argc, char * argv )$/;"	f
main	Signal/sigAction.c	/^int main()$/;"	f
main	Signal/sigint.c	/^int main( int argc, char **argv )$/;"	f
main	Signal/signal.c	/^int main( int argc, char **argv )$/;"	f
main	Thread/01_testForThread/01_test.cpp	/^int main ( int argc, char* argv[] )$/;"	f
main	Thread/02_DaemonizeTest/02_daemonize.cpp	/^int main ( int argc, char* argv[] )$/;"	f
main	Thread/02_DaemonizeTest/hello_client.c	/^int main(int argc, char* argv[])$/;"	f
next	LinkedList/ll.h	/^    struct Node* next;$/;"	m	struct:Node	typeref:struct:Node::Node
printLinkedList	LinkedList/ll.c	/^void printLinkedList ( struct LinkedList* root )$/;"	f
sig_handler	Signal/sigint.c	/^void sig_handler( int signo )$/;"	f
sig_int	Signal/sigAction.c	/^void sig_int( int signo )$/;"	f
sig_usr	Signal/sigAction.c	/^void sig_usr( int signo )$/;"	f
str	Thread/01_testForThread/01_test.cpp	/^    char str[MAX_LEN];$/;"	m	struct:dataForThread	file:
str	Thread/02_DaemonizeTest/02_daemonize.cpp	/^    char str[MAX_LEN];$/;"	m	struct:dataForThread	file:
