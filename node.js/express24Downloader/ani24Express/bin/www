#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ani24Express:server');
var http = require('http');

var aniDownloader = require( '../controllers/ani24Downloader' );
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io').listen(server);

io.sockets.on('connection',function(socket){

   socket.on( 'downFile', function( data ){
     var downList = app.get( 'downList' );

     var fileUrl = data.url;
     var progress = data.progress;

     var isExist = downList.some( function( item, index, array ) {
       return !item.url.search(fileUrl);
     });
     if ( !isExist )//찾아서 없으면
     {
       downList.push( data );
       app.set( 'downList', downList );

       aniDownloader.download( fileUrl,
          function( url, currPercent ) {
            var datagram = { url: url, progress: currPercent };
            socket.emit('progress', datagram );
          },
          function( url ) {
            var datagram = { url: url, progress: 100 };
            socket.emit('progress', datagram );
          });
       socket.emit( 'addUrl', data );
     }
   });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
